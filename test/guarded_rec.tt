;; Guarded Rec
;;        g
;;       -->
;; l < T     S
;;      <---
;;        d
;; id_l : id -> l
;; dg_id: d o g -> id
;; box := d o g

;; Here a small test that should not work, remove the mode check for variables in "synth" and it will go through
;; axiom test : Nat @ T

;; let bad : Nat @ S =
;;    test

;;-------------- EQUALITY AXIOM and LEMMA ---------------------

axiom inv_eq1 : (A : U<0>) -> (B : U<0>) -> (Id U<0> A B) -> Id U<0> B A @ T

let transport1 : (A : U<0>) -> (B : U<0>) -> (Id U<0> A B) -> A -> B @ T =
    fun A B eq ->
    match eq at x y p -> x -> y with
          | refl z -> fun x -> x

;; ------------------- Box is an idempotant comonad ------------------------
let dup_inv : (A : {box . box | U<0>}) -> << box | << box | A >> >> -> << box | A >> @ T =
    fun A -> fun x ->
    letmod idm (fun z -> << box |  A >>) mod box (y) <- x in
    letmod box (fun z -> << box |  A >>) mod box (z) <- y in
    mod (box . box) z

normalize dup_inv {box . box, Nat} at << box | << box | Nat >> >> -> << box | Nat >> @ T


;; ------------------- Modal elimination tests ----------------------
let triv : (A : U<0>) -> (x : A) -> <<idm | A>> @ S =
    fun A -> fun x -> mod idm x

;; -------------- The next function for the later modality, next1 is defined over the universe -----------
let next : (A : U<0>) -> A -> << l | A >> @ T =
    fun A -> fun x -> mod l x


let next1 : U<0> -> << l | U<0> >> @ T =
    fun x -> mod l x

let coe : (A : U<0>) -> A -> << l | A >> @ T =
    fun A x -> mod l x

;; -------------------- AXIOMS for Guarded Rec -------------

axiom lob : (A : U<0>) -> ({l | A} -> A) -> A @ T
axiom lob1 : ({l | U<0>} -> U<0>) -> U<0> @ T
axiom lob_beta :
  (A : U<0>) ->
  (f : {l | A} -> A) ->
  Id A (lob A f) (letmod idm (fun z -> A) mod l (x) <- next A (lob A f) in f {l, x})
  @ T
axiom lob1_beta :
  (f : {l | U<0>} -> U<0>) ->
  Id U<0> (lob1 f) (letmod idm (fun z -> U<0>) mod l (x) <- next1 (lob1 f) in f {l, x})
  @ T

;; -------------- Guarded Streams -----------------------

let gstream : (A : U<0>) -> U<0> @ T =
    fun A -> lob1 (fun s ->  A * << l | s >>)

let gstream_fun : (A : U<0>) -> {l | U<0>} -> U<0> @ T =
   fun A s ->  A * << l | s >>

let unfold : (A : U<0>) -> (gstream A) ->
    (letmod idm (fun z -> U<0>) mod l (x) <- next1 (gstream A) in
     (gstream_fun A) {l, x}) @ T =
    fun A str ->
        transport1
            (gstream A)
            (letmod idm (fun z -> U<0>) mod l (x) <- next1 (gstream A)
             in (gstream_fun A) {l, x})
            (lob1_beta (gstream_fun A))
            str

;; ------- Unfold a bit more readible, but it is the same definition -------

let alt_unfold : (A : U<0>) -> (gstream A) -> A * << l | gstream A >>
     @ T =
    fun A str ->
        transport1
            (gstream A)
            (A * << l | gstream A >>)
            (lob1_beta (gstream_fun A))
            str

let fold : (A : U<0>) ->
    (letmod idm (fun z -> U<0>) mod l (x) <- next1 (gstream A)
     in (gstream_fun A) {l, x})
    -> gstream A @ T =
    fun A str ->
        transport1
            (letmod idm (fun z -> U<0>) mod l (x) <- next1 (gstream A) in (gstream_fun A) {l, x})
            (gstream A)
            (inv_eq1
                (gstream A)
                (letmod idm (fun z -> U<0>) mod l (x) <- next1 (gstream A) in (gstream_fun A) {l, x})
                (lob1_beta (gstream_fun A)))
            str

;; -------------

let ghead : (A : U<0>) -> (gstream A) -> A @ T =
    fun A lst -> fst (unfold A lst)

let gcons : (A : U<0>) -> A -> (gstream A) -> gstream A @ T =
    fun A head tail -> fold A (pair (head , next (gstream A) tail))

;; ----------------------------- Streams --------------------------

let stream : (A : U<0>) -> U<0> @ S =
    fun A -> << g | gstream <<d | A>> >>
